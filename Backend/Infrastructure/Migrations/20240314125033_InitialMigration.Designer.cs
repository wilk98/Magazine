// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240314125033_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.DokumentPrzyjecia", b =>
                {
                    b.Property<int>("DokumentPrzyjeciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DokumentPrzyjeciaId"));

                    b.Property<DateTime>("DataPrzyjecia")
                        .HasColumnType("datetime2");

                    b.Property<int>("DostawcaId")
                        .HasColumnType("int");

                    b.Property<int>("MagazynId")
                        .HasColumnType("int");

                    b.HasKey("DokumentPrzyjeciaId");

                    b.HasIndex("DostawcaId");

                    b.HasIndex("MagazynId");

                    b.ToTable("DokumentyPrzyjecia");
                });

            modelBuilder.Entity("Core.Dostawca", b =>
                {
                    b.Property<int>("DostawcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DostawcaId"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaFirmy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DostawcaId");

                    b.ToTable("Dostawcy");
                });

            modelBuilder.Entity("Core.Etykieta", b =>
                {
                    b.Property<int>("EtykietaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EtykietaId"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EtykietaId");

                    b.ToTable("Etykiety");
                });

            modelBuilder.Entity("Core.Magazyn", b =>
                {
                    b.Property<int>("MagazynId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MagazynId"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MagazynId");

                    b.ToTable("Magazyny");
                });

            modelBuilder.Entity("Core.PozycjaTowaru", b =>
                {
                    b.Property<int>("PozycjaTowaruId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PozycjaTowaruId"));

                    b.Property<decimal>("Cena")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DokumentPrzyjeciaId")
                        .HasColumnType("int");

                    b.Property<int>("Ilosc")
                        .HasColumnType("int");

                    b.Property<int>("TowarId")
                        .HasColumnType("int");

                    b.HasKey("PozycjaTowaruId");

                    b.HasIndex("DokumentPrzyjeciaId");

                    b.HasIndex("TowarId");

                    b.ToTable("PozycjeTowaru");
                });

            modelBuilder.Entity("Core.Towar", b =>
                {
                    b.Property<int>("TowarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TowarId"));

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TowarId");

                    b.ToTable("Towary");
                });

            modelBuilder.Entity("DokumentPrzyjeciaEtykieta", b =>
                {
                    b.Property<int>("DokumentyPrzyjeciaDokumentPrzyjeciaId")
                        .HasColumnType("int");

                    b.Property<int>("EtykietyEtykietaId")
                        .HasColumnType("int");

                    b.HasKey("DokumentyPrzyjeciaDokumentPrzyjeciaId", "EtykietyEtykietaId");

                    b.HasIndex("EtykietyEtykietaId");

                    b.ToTable("DokumentPrzyjeciaEtykieta");
                });

            modelBuilder.Entity("Core.DokumentPrzyjecia", b =>
                {
                    b.HasOne("Core.Dostawca", "Dostawca")
                        .WithMany("DokumentyPrzyjecia")
                        .HasForeignKey("DostawcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Magazyn", "Magazyn")
                        .WithMany("DokumentyPrzyjecia")
                        .HasForeignKey("MagazynId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dostawca");

                    b.Navigation("Magazyn");
                });

            modelBuilder.Entity("Core.PozycjaTowaru", b =>
                {
                    b.HasOne("Core.DokumentPrzyjecia", "DokumentPrzyjecia")
                        .WithMany("PozycjeTowaru")
                        .HasForeignKey("DokumentPrzyjeciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Towar", "Towar")
                        .WithMany("PozycjeTowaru")
                        .HasForeignKey("TowarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DokumentPrzyjecia");

                    b.Navigation("Towar");
                });

            modelBuilder.Entity("DokumentPrzyjeciaEtykieta", b =>
                {
                    b.HasOne("Core.DokumentPrzyjecia", null)
                        .WithMany()
                        .HasForeignKey("DokumentyPrzyjeciaDokumentPrzyjeciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Etykieta", null)
                        .WithMany()
                        .HasForeignKey("EtykietyEtykietaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.DokumentPrzyjecia", b =>
                {
                    b.Navigation("PozycjeTowaru");
                });

            modelBuilder.Entity("Core.Dostawca", b =>
                {
                    b.Navigation("DokumentyPrzyjecia");
                });

            modelBuilder.Entity("Core.Magazyn", b =>
                {
                    b.Navigation("DokumentyPrzyjecia");
                });

            modelBuilder.Entity("Core.Towar", b =>
                {
                    b.Navigation("PozycjeTowaru");
                });
#pragma warning restore 612, 618
        }
    }
}
